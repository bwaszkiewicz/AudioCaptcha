@startuml

CaptchaRenderer o- TextImgFactory : <<use>>

TextImgFactory - TextImgType
BlurTextImgProducer <.. TextImgFactory : <<create>>
DashTextImgProducer <.. TextImgFactory : <<create>>
DefaultTextImgProducer <.. TextImgFactory : <<create>>
HollowTextImgProducer <.. TextImgFactory : <<create>>
TriangleTextImgProducer <.. TextImgFactory : <<create>>
TextImgProducer <|- BlurTextImgProducer
TextImgProducer <|- DashTextImgProducer
TextImgProducer <|--- DefaultTextImgProducer
TextImgProducer <|- HollowTextImgProducer
TextImgProducer <|- TriangleTextImgProducer

abstract class View{
}

View <|-- CaptchaRenderer

+class CaptchaRenderer{

-width : int
-height : int
-code : String
-colorGenerator : ColorGenerator
-backgroundProducer : BackgroundProducer
-textImgProducer : TextImgProducer
-noiseProducer : NoiseProducer
-code : String

+CaptchaRenderer(context : Context, width : int, height : int, backgroundType : BackgroundType, textImgType : TextImgType, code : String)
#onDraw(Canvas canvas) : void
}

+class TextImgFactory{
+ getTextImgProducer(type : TextImgType) : TextImgProducer
}

+enum TextImgType{
DEFAULT
HOLLOW
DASH
ROOUND_DASH
TRIANGLE
BLUR
}

+class BlurTextImgProducer{
-{static}RAND : Random

+Canvas getText(width : int, height : int, text : String, canvas : Canvas, textColor : int)
-drawBlurType() BlurMaskFilter.Blur
-sumArray(array : float[]) : float
}

+class DashTextImgProducer{
-{static}RAND : Random

+getText(width : int, height : int, text : String, canvas : Canvas, textColor : int) : Canvas
-sumArray(array : float[]) : float
}

+class DefaultTextImgProducer{
-{static}RAND : Random

+getText(int width, int height, String text, Canvas canvas, int textColor) : Canvas
-sumArray(array : float[]) : float
}

+class HollowTextImgProducer{
-{static}RAND : Random

+getText(width : int, height : int, text : String, canvas : Canvas, textColor : int) : Canvas
-sumArray(array : float[]) : float
}

+class TriangleTextImgProducer{
-{static}RAND : Random

+getText(width : int, height : int, text : String, canvas : Canvas, textColor : int) : Canvas
-getTriangle(size : float) : Path
-sumArray(array : float[]) : float
}

interface TextImgProducer{
Canvas getText(width : int, height : int, text : String, canvas : Canvas, textColor : int)
}
@enduml